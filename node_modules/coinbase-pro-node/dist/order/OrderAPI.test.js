"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const OrderAPI_1 = require("./OrderAPI");
const payload_1 = require("../payload");
describe('OrderAPI', () => {
    afterEach(() => nock_1.default.cleanAll());
    describe('placeOrder', () => {
        it('places market buy orders', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .post(OrderAPI_1.OrderAPI.URL.ORDERS)
                .query(true)
                .reply((_uri, body) => {
                const newOrder = typeof body === 'string' ? JSON.parse(body) : body;
                return [
                    200,
                    JSON.stringify({
                        created_at: '2019-04-22T20:21:20.897409Z',
                        executed_value: '0.0000000000000000',
                        fill_fees: '0.0000000000000000',
                        filled_size: '0.00000000',
                        funds: '207850.8486540300000000',
                        id: '8eba9e7b-08d6-4667-90ca-6db445d743c0',
                        post_only: false,
                        product_id: newOrder.product_id,
                        settled: false,
                        side: newOrder.side,
                        size: '0.10000000',
                        status: OrderAPI_1.OrderStatus.PENDING,
                        stp: OrderAPI_1.SelfTradePrevention.DECREMENT_AND_CANCEL,
                        type: newOrder.type,
                    }),
                ];
            });
            const placedOrder = yield global.client.rest.order.placeOrder({
                product_id: 'BTC-EUR',
                side: payload_1.OrderSide.BUY,
                size: '0.1',
                type: OrderAPI_1.OrderType.MARKET,
            });
            expect(placedOrder.size).toBe('0.10000000');
            expect(placedOrder.status).toBe(OrderAPI_1.OrderStatus.PENDING);
        }));
    });
    describe('getOrders', () => {
        it('returns list of open orders', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .get(OrderAPI_1.OrderAPI.URL.ORDERS)
                .query(true)
                .reply(200, (uri) => {
                expect(uri).toBe('/orders');
                return JSON.stringify([
                    {
                        created_at: '2019-04-22T20:21:20.897409Z',
                        executed_value: '0.0000000000000000',
                        fill_fees: '0.0000000000000000',
                        filled_size: '0.00000000',
                        funds: '207850.8486540300000000',
                        id: '8eba9e7b-08d6-4667-90ca-6db445d743c0',
                        post_only: false,
                        product_id: 'BTC-EUR',
                        settled: false,
                        side: payload_1.OrderSide.BUY,
                        size: '0.10000000',
                        status: OrderAPI_1.OrderStatus.OPEN,
                        stp: OrderAPI_1.SelfTradePrevention.DECREMENT_AND_CANCEL,
                        type: OrderAPI_1.OrderType.MARKET,
                    },
                ]);
            });
            const openOrders = yield global.client.rest.order.getOrders();
            expect(openOrders.data.length).toBe(1);
            expect(openOrders.data[0].status).toBe(OrderAPI_1.OrderStatus.OPEN);
        }));
        it('accepts a list of different order statuses', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .get(OrderAPI_1.OrderAPI.URL.ORDERS)
                .query(true)
                .reply(200, (uri) => {
                expect(uri).toBe('/orders?status=open&status=pending');
                return JSON.stringify([
                    {
                        created_at: '2019-04-22T20:21:20.897409Z',
                        executed_value: '0.0000000000000000',
                        fill_fees: '0.0000000000000000',
                        filled_size: '0.00000000',
                        funds: '207850.8486540300000000',
                        id: '8eba9e7b-08d6-4667-90ca-6db445d743c0',
                        post_only: false,
                        product_id: 'BTC-EUR',
                        settled: false,
                        side: payload_1.OrderSide.BUY,
                        size: '0.10000000',
                        status: OrderAPI_1.OrderStatus.OPEN,
                        stp: OrderAPI_1.SelfTradePrevention.DECREMENT_AND_CANCEL,
                        type: OrderAPI_1.OrderType.MARKET,
                    },
                ]);
            });
            const openOrders = yield global.client.rest.order.getOrders({
                status: [OrderAPI_1.OrderStatus.OPEN, OrderAPI_1.OrderStatus.PENDING],
            });
            expect(openOrders.data.length).toBe(1);
        }));
    });
    describe('getOrder', () => {
        it('returns correct order information', () => __awaiter(void 0, void 0, void 0, function* () {
            const orderId = '8eba9e7b-08d6-4667-90ca-6db445d743c1';
            nock_1.default(global.REST_URL)
                .get(`${OrderAPI_1.OrderAPI.URL.ORDERS}/${orderId}`)
                .query(true)
                .reply(200, JSON.stringify({
                created_at: '2016-12-08T20:09:05.508883Z',
                done_at: '2016-12-08T20:09:05.527Z',
                done_reason: 'filled',
                executed_value: '9.9750556620000000',
                fill_fees: '0.0249376391550000',
                filled_size: '0.01291771',
                funds: '9.9750623400000000',
                id: orderId,
                post_only: false,
                product_id: 'BTC-USD',
                settled: true,
                side: payload_1.OrderSide.BUY,
                size: '1.00000000',
                specified_funds: '10.0000000000000000',
                status: 'done',
                stp: OrderAPI_1.SelfTradePrevention.DECREMENT_AND_CANCEL,
                type: 'market',
            }));
            const order = yield global.client.rest.order.getOrder('8eba9e7b-08d6-4667-90ca-6db445d743c1');
            expect(order.id).toBe('8eba9e7b-08d6-4667-90ca-6db445d743c1');
        }));
        it('returns null if an order cannot be found', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL).get(`${OrderAPI_1.OrderAPI.URL.ORDERS}/123`).query(true).reply(404);
            const order = yield global.client.rest.order.getOrder('123');
            expect(order).toEqual(null);
        }));
        it('rethrows errors with status code other than 404', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL).get(`${OrderAPI_1.OrderAPI.URL.ORDERS}/123`).query(true).reply(403);
            try {
                yield global.client.rest.order.getOrder('123');
            }
            catch (error) {
                expect(error.response.status).toBe(403);
            }
        }));
    });
    describe('cancelOrder', () => {
        it('correctly deletes a specific order', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .delete(`${OrderAPI_1.OrderAPI.URL.ORDERS}/8eba9e7b-08d6-4667-90ca-6db445d743c1`)
                .query(true)
                .reply(200, '8eba9e7b-08d6-4667-90ca-6db445d743c1');
            const canceledOrderId = yield global.client.rest.order.cancelOrder('8eba9e7b-08d6-4667-90ca-6db445d743c1');
            expect(canceledOrderId).toEqual('8eba9e7b-08d6-4667-90ca-6db445d743c1');
        }));
        it('creates more performant requests when passing the product ID', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .delete(`${OrderAPI_1.OrderAPI.URL.ORDERS}/8eba9e7b-08d6-4667-90ca-6db445d743c1`)
                .query(true)
                .reply(200, '8eba9e7b-08d6-4667-90ca-6db445d743c1');
            const canceledOrderId = yield global.client.rest.order.cancelOrder('8eba9e7b-08d6-4667-90ca-6db445d743c1', 'BTC-USD');
            expect(canceledOrderId).toEqual('8eba9e7b-08d6-4667-90ca-6db445d743c1');
        }));
    });
    describe('cancelOpenOrders', () => {
        it('correctly deletes all open orders if no productId is passed', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .delete(`${OrderAPI_1.OrderAPI.URL.ORDERS}`)
                .query(true)
                .reply(200, ['8eba9e7b-08d6-4667-90ca-6db445d743c1']);
            const canceledOrderIds = yield global.client.rest.order.cancelOpenOrders();
            expect(canceledOrderIds).toEqual(['8eba9e7b-08d6-4667-90ca-6db445d743c1']);
        }));
        it('correctly deletes all open orders for just the provided productId', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .delete(`${OrderAPI_1.OrderAPI.URL.ORDERS}?product_id=ETH-EUR`)
                .reply(200, ['8eba9e7b-08d6-4667-90ca-6db445d743c1']);
            const canceledOrderIds = yield global.client.rest.order.cancelOpenOrders('ETH-EUR');
            expect(canceledOrderIds).toEqual(['8eba9e7b-08d6-4667-90ca-6db445d743c1']);
        }));
    });
});
//# sourceMappingURL=OrderAPI.test.js.map