"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GET_200_json_1 = __importDefault(require("../test/fixtures/rest/accounts/322dfa88-e10d-4678-856d-2930eac3e62d/GET-200.json"));
const GET_200_json_2 = __importDefault(require("../test/fixtures/rest/accounts/322dfa88-e10d-4678-856d-2930eac3e62d/ledger/GET-200.json"));
const GET_200_json_3 = __importDefault(require("../test/fixtures/rest/accounts/322dfa88-e10d-4678-856d-2930eac3e62d/holds/GET-200.json"));
const GET_200_json_4 = __importDefault(require("../test/fixtures/rest/accounts/GET-200.json"));
const nock_1 = __importDefault(require("nock"));
const AccountAPI_1 = require("./AccountAPI");
describe('AccountAPI', () => {
    afterAll(() => nock_1.default.cleanAll());
    beforeAll(() => {
        nock_1.default(global.REST_URL).persist().get(AccountAPI_1.AccountAPI.URL.ACCOUNTS).query(true).reply(200, JSON.stringify(GET_200_json_4.default));
        nock_1.default(global.REST_URL)
            .persist()
            .get(`${AccountAPI_1.AccountAPI.URL.ACCOUNTS}/322dfa88-e10d-4678-856d-2930eac3e62d`)
            .query(true)
            .reply(200, JSON.stringify(GET_200_json_1.default));
        nock_1.default(global.REST_URL)
            .persist()
            .get(`${AccountAPI_1.AccountAPI.URL.ACCOUNTS}/322dfa88-e10d-4678-856d-2930eac3e62d/ledger`)
            .query(true)
            .reply(200, JSON.stringify(GET_200_json_2.default));
        nock_1.default(global.REST_URL)
            .persist()
            .get(`${AccountAPI_1.AccountAPI.URL.ACCOUNTS}/322dfa88-e10d-4678-856d-2930eac3e62d/holds`)
            .query(true)
            .reply(200, JSON.stringify(GET_200_json_3.default));
    });
    describe('listAccounts', () => {
        it('gets a list of trading accounts', () => __awaiter(void 0, void 0, void 0, function* () {
            const accounts = yield global.client.rest.account.listAccounts();
            expect(accounts.length).toBe(7);
        }));
    });
    describe('listCoinbaseAccounts', () => {
        it('returns the list of the coinbase accounts for a given user', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = [
                {
                    active: true,
                    balance: '0.00000000',
                    currency: 'ETH',
                    id: 'fc3a8a57-7142-542d-8436-95a3d82e1622',
                    name: 'ETH Wallet',
                    primary: false,
                    type: AccountAPI_1.AccountType.WALLET,
                },
            ];
            nock_1.default(global.REST_URL).get(AccountAPI_1.AccountAPI.URL.COINBASE_ACCOUNT).reply(200, response);
            const coinbaseAccounts = yield global.client.rest.account.listCoinbaseAccounts();
            expect(coinbaseAccounts.length).toBeGreaterThanOrEqual(1);
            expect(coinbaseAccounts[0]).toEqual(response[0]);
        }));
    });
    describe('getAccount', () => {
        it('gets information for a single account', () => __awaiter(void 0, void 0, void 0, function* () {
            const accounts = yield global.client.rest.account.listAccounts();
            const accountId = accounts[0].id;
            const account = yield global.client.rest.account.getAccount(accountId);
            expect(account.id).toBe(accountId);
        }));
    });
    describe('getAccountHistory', () => {
        it('lists the account activity', () => __awaiter(void 0, void 0, void 0, function* () {
            const accounts = yield global.client.rest.account.listAccounts();
            const accountId = accounts[0].id;
            const history = yield global.client.rest.account.getAccountHistory(accountId, { limit: 100 });
            expect(history).toBeDefined();
        }));
    });
    describe('getHolds', () => {
        it('lists active orders or pending withdraw requests', () => __awaiter(void 0, void 0, void 0, function* () {
            const accounts = yield global.client.rest.account.listAccounts();
            const accountId = accounts[0].id;
            const holds = yield global.client.rest.account.getHolds(accountId);
            expect(holds).toBeDefined();
        }));
    });
});
//# sourceMappingURL=AccountAPI.test.js.map