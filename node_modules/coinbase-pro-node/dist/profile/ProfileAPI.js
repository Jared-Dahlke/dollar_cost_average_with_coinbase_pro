"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileAPI = void 0;
class ProfileAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * List your profiles. Profiles are equivalent to portfolios.
     * This endpoint requires the “view” permission and is accessible by any profile’s API key.
     *
     * @param active - Only return active profiles if set true
     * @see https://docs.pro.coinbase.com/#list-profiles
     */
    listProfiles(active) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = ProfileAPI.URL.PROFILES;
            const config = active === true
                ? {
                    params: {
                        active,
                    },
                }
                : undefined;
            const response = yield this.apiClient.get(resource, config);
            return response.data;
        });
    }
    /**
     * Get a single profile by profile ID.
     * This endpoint requires the “view” permission and is accessible by any profile’s API key.
     *
     * @param profileId - Profile ID
     * @returns A single profile
     */
    getProfile(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProfileAPI.URL.PROFILES}/${profileId}`;
            try {
                const response = yield this.apiClient.get(resource);
                return response.data;
            }
            catch (error) {
                if (error.response.status === 404) {
                    return null;
                }
                throw error;
            }
        });
    }
    /**
     * Transfer funds from API key’s profile to another user owned profile.
     * This endpoint requires the “transfer” permission.
     *
     * @see https://docs.pro.coinbase.com/#create-profile-transfer
     */
    transferFunds(transfer) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProfileAPI.URL.PROFILES}/transfer`;
            yield this.apiClient.post(resource, transfer);
        });
    }
}
exports.ProfileAPI = ProfileAPI;
ProfileAPI.URL = {
    PROFILES: `/profiles`,
};
//# sourceMappingURL=ProfileAPI.js.map