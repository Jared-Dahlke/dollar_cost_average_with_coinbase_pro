"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const WithdrawAPI_1 = require("./WithdrawAPI");
describe('WithdrawAPI', () => {
    const currency = 'BTC';
    const cryptoAddress = '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa';
    const expectedFeeEstimate = { fee: '.01' };
    const withdrawalId = 'fake-withdrawal-id-abcd-01234';
    afterAll(() => nock_1.default.cleanAll());
    describe('withdrawToCryptoAddress', () => {
        beforeAll(() => {
            nock_1.default(global.REST_URL)
                .persist()
                .post(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.CRYPTO)
                .reply((_uri, body) => {
                const withdrawal = typeof body === 'string' ? JSON.parse(body) : body;
                const response = {
                    amount: withdrawal.amount,
                    currency: withdrawal.currency,
                    id: withdrawalId,
                };
                return [200, JSON.stringify(response)];
            })
                .get(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.FEE_ESTIMATE)
                .query({ crypto_address: cryptoAddress, currency })
                .reply(200, JSON.stringify(expectedFeeEstimate));
        });
        const amount = '1.23';
        const destinationTag = 'satoshi-nakamoto';
        it('creates a new withdrawal to crypto address', () => __awaiter(void 0, void 0, void 0, function* () {
            const withdrawal = yield global.client.rest.withdraw.withdrawToCryptoAddress(amount, currency, cryptoAddress);
            expect(withdrawal).toEqual({ amount, currency, id: withdrawalId });
        }));
        it('creates a new withdrawal to crypto address (with destination tag)', () => __awaiter(void 0, void 0, void 0, function* () {
            const withdrawal = yield global.client.rest.withdraw.withdrawToCryptoAddress(amount, currency, cryptoAddress, destinationTag);
            expect(withdrawal).toEqual({ amount, currency, id: withdrawalId });
        }));
    });
    describe('withdrawToCoinbaseAccount', () => {
        it('withdraws funds to a Coinbase account', () => __awaiter(void 0, void 0, void 0, function* () {
            const amount = '10.00';
            const currency = 'BTC';
            nock_1.default(global.REST_URL)
                .persist()
                .post(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.COINBASE_ACCOUNT)
                .reply(200, JSON.stringify({
                amount: amount,
                currency: currency,
                id: '593533d2-ff31-46e0-b22e-ca754147a96a',
            }));
            const withdrawal = yield global.client.rest.withdraw.withdrawToCoinbaseAccount(amount, currency, 'c13cd0fc-72ca-55e9-843b-b84ef628c198');
            expect(withdrawal.amount).toBe(amount);
            expect(withdrawal.currency).toBe(currency);
        }));
    });
    describe('withdrawToPaymentMethod', () => {
        it('withdraws funds via a selected payment method', () => __awaiter(void 0, void 0, void 0, function* () {
            const amount = '10.00';
            const currency = 'USD';
            nock_1.default(global.REST_URL)
                .persist()
                .post(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.PAYMENT_METHOD)
                .reply(200, JSON.stringify({
                amount,
                currency,
                id: '593533d2-ff31-46e0-b22e-ca754147a96a',
                payout_at: '2016-08-20T00:31:09Z',
            }));
            const withdrawal = yield global.client.rest.withdraw.withdrawToPaymentMethod(amount, currency, 'bc677162-d934-5f1a-968c-a496b1c1270b');
            expect(withdrawal.amount).toBe(amount);
            expect(withdrawal.currency).toBe(currency);
        }));
    });
    describe('getFeeEstimate', () => {
        it('gets a fee estimate', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .persist()
                .get(WithdrawAPI_1.WithdrawAPI.URL.WITHDRAWALS.FEE_ESTIMATE)
                .query({ crypto_address: cryptoAddress, currency })
                .reply(200, JSON.stringify(expectedFeeEstimate));
            const estimate = yield global.client.rest.withdraw.getFeeEstimate(currency, cryptoAddress);
            expect(estimate).toEqual(expectedFeeEstimate);
        }));
    });
    describe('getPaymentMethods', () => {
        it('gets a list of your payment methods', () => __awaiter(void 0, void 0, void 0, function* () {
            nock_1.default(global.REST_URL)
                .persist()
                .get(WithdrawAPI_1.WithdrawAPI.URL.LIST_PAYMENT_METHODS)
                .reply(200, JSON.stringify([
                {
                    allow_buy: true,
                    allow_deposit: true,
                    allow_sell: true,
                    allow_withdraw: true,
                    currency: 'USD',
                    id: 'bc6d7162-d984-5ffa-963c-a493b1c1370b',
                    limits: {
                        buy: [
                            {
                                period_in_days: 1,
                                remaining: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                                total: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                            },
                        ],
                        deposit: [
                            {
                                period_in_days: 1,
                                remaining: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                                total: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                            },
                        ],
                        instant_buy: [
                            {
                                period_in_days: 7,
                                remaining: {
                                    amount: '0.00',
                                    currency: 'USD',
                                },
                                total: {
                                    amount: '0.00',
                                    currency: 'USD',
                                },
                            },
                        ],
                        sell: [
                            {
                                period_in_days: 1,
                                remaining: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                                total: {
                                    amount: '10000.00',
                                    currency: 'USD',
                                },
                            },
                        ],
                    },
                    name: 'Bank of America - eBan... ********7134',
                    primary_buy: true,
                    primary_sell: true,
                    type: 'ach_bank_account',
                },
            ]));
            const paymentMethods = yield global.client.rest.withdraw.getPaymentMethods();
            expect(paymentMethods[0].limits.instant_buy[0].period_in_days).toBe(7);
        }));
    });
});
//# sourceMappingURL=WithdrawAPI.test.js.map