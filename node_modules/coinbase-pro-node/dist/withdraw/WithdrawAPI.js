"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawAPI = void 0;
class WithdrawAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * Withdraws funds to a crypto address.
     *
     * @param amount - The amount to withdraw
     * @param currency - The type of currency
     * @param cryptoAddress - A crypto address of the recipient
     * @param destinationTag - A destination tag for currencies that support one
     * @param addNetworkFeeToTotal - A boolean flag to add the network fee on top of the amount.
     * If this is blank, it will default to deducting the network fee from the amount.
     * @see https://docs.pro.coinbase.com/#crypto
     */
    withdrawToCryptoAddress(amount, currency, cryptoAddress, destinationTag, addNetworkFeeToTotal) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = WithdrawAPI.URL.WITHDRAWALS.CRYPTO;
            const withdrawal = {
                add_network_fee_to_total: addNetworkFeeToTotal,
                amount,
                crypto_address: cryptoAddress,
                currency,
            };
            if (destinationTag) {
                withdrawal.destination_tag = destinationTag;
            }
            else {
                withdrawal.no_destination_tag = true;
            }
            const response = yield this.apiClient.post(resource, withdrawal);
            return response.data;
        });
    }
    /**
     * Withdraw funds to a Coinbase account. You can move funds between your Coinbase accounts and your Coinbase Pro
     * trading accounts within your daily limits.
     *
     * @param amount - The amount to withdraw
     * @param currency - The type of currency
     * @param coinbaseAccountId - ID of the Coinbase or Coinbase Pro account
     * @see https://docs.pro.coinbase.com/#coinbase56
     */
    withdrawToCoinbaseAccount(amount, currency, coinbaseAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = WithdrawAPI.URL.WITHDRAWALS.COINBASE_ACCOUNT;
            const withdrawal = {
                amount,
                coinbase_account_id: coinbaseAccountId,
                currency,
            };
            const response = yield this.apiClient.post(resource, withdrawal);
            return response.data;
        });
    }
    /**
     * Withdraw funds to a payment method.
     *
     * @param amount - The amount to withdraw
     * @param currency - The type of currency
     * @param paymentMethodId - ID of the payment method
     * @see https://docs.pro.coinbase.com/#payment-method55
     */
    withdrawToPaymentMethod(amount, currency, paymentMethodId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = WithdrawAPI.URL.WITHDRAWALS.PAYMENT_METHOD;
            const withdrawal = {
                amount,
                currency,
                payment_method_id: paymentMethodId,
            };
            const response = yield this.apiClient.post(resource, withdrawal);
            return response.data;
        });
    }
    /**
     * Get the network fee estimate when sending to the given address.
     *
     * @param currency - The type of currency
     * @param cryptoAddress - A crypto address of the recipient
     * @see https://docs.pro.coinbase.com/#fee-estimate
     */
    getFeeEstimate(currency, cryptoAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = WithdrawAPI.URL.WITHDRAWALS.FEE_ESTIMATE;
            const response = yield this.apiClient.get(resource, {
                params: { crypto_address: cryptoAddress, currency },
            });
            return response.data;
        });
    }
    /**
     * Get a list of your payment methods.
     *
     * @see https://docs.pro.coinbase.com/#list-payment-methods
     */
    getPaymentMethods() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = WithdrawAPI.URL.LIST_PAYMENT_METHODS;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
}
exports.WithdrawAPI = WithdrawAPI;
WithdrawAPI.URL = {
    LIST_PAYMENT_METHODS: '/payment-methods',
    WITHDRAWALS: {
        COINBASE_ACCOUNT: '/withdrawals/coinbase-account',
        CRYPTO: '/withdrawals/crypto',
        FEE_ESTIMATE: '/withdrawals/fee-estimate',
        PAYMENT_METHOD: '/withdrawals/payment-method',
    },
};
//# sourceMappingURL=WithdrawAPI.js.map