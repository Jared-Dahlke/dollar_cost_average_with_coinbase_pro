"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
describe('FeeAPI', () => {
    describe('getCurrentFees', () => {
        it('returns maker & taker fee rates', () => __awaiter(void 0, void 0, void 0, function* () {
            const response = {
                maker_fee_rate: '0.0050',
                taker_fee_rate: '0.0050',
                usd_volume: null,
            };
            nock_1.default(global.REST_URL).get('/fees').reply(200, response);
            const canceledOrderIds = yield global.client.rest.fee.getCurrentFees();
            expect(canceledOrderIds).toEqual(response);
        }));
    });
});
//# sourceMappingURL=FeeAPI.test.js.map