"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicClient = exports.DefaultHeaders = exports.DefaultProductID = exports.SandboxApiUri = exports.ApiUri = void 0;
const rpc_request_1 = require("rpc-request");
const node_fetch_1 = require("node-fetch");
const querystring_1 = require("querystring");
exports.ApiUri = "https://api.pro.coinbase.com";
exports.SandboxApiUri = "https://api-public.sandbox.pro.coinbase.com";
exports.DefaultProductID = "BTC-USD";
exports.DefaultHeaders = { "User-Agent": "coinbase-pro-node-api" };
class PublicClient extends rpc_request_1.FetchClient {
  constructor({
    product_id = exports.DefaultProductID,
    sandbox = false,
    apiUri = sandbox ? exports.SandboxApiUri : exports.ApiUri,
  } = {}) {
    super(
      { headers: exports.DefaultHeaders },
      { rejectNotOk: false, transform: "raw", baseUrl: apiUri }
    );
    this.apiUri = new URL(apiUri);
    this.product_id = product_id;
  }
  async fetch(path, options = {}) {
    const headers = new node_fetch_1.Headers(options.headers);
    if (options.body) {
      headers.set("Content-Type", "application/json");
    }
    const response = await super.fetch(path, {
      ...options,
      headers,
    });
    const text = await response.text();
    const data = PublicClient.parseJSON(text);
    if (!response.ok) {
      throw new Error(data?.message ?? text);
    }
    return data ?? text;
  }
  async getProducts() {
    const products = await this.get("/products");
    return products;
  }
  async getProduct({ product_id = this.product_id } = {}) {
    const product = await this.get(`/products/${product_id}`);
    return product;
  }
  async getOrderBook({ product_id = this.product_id, ...qs } = {}) {
    const url = new URL(`/products/${product_id}/book`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const book = await this.get(url.toString());
    return book;
  }
  async getTicker({ product_id = this.product_id } = {}) {
    const ticker = await this.get(`/products/${product_id}/ticker`);
    return ticker;
  }
  async getTrades({ product_id = this.product_id, ...qs } = {}) {
    const url = new URL(`/products/${product_id}/trades`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const trades = await this.get(url.toString());
    return trades;
  }
  async getHistoricRates({ product_id = this.product_id, ...qs }) {
    const url = new URL(`/products/${product_id}/candles`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const rates = await this.get(url.toString());
    return rates;
  }
  async get24hrStats({ product_id = this.product_id } = {}) {
    const path = `/products/${product_id}/stats`;
    const stats = await this.get(path);
    return stats;
  }
  async getCurrencies() {
    const currencies = await this.get("/currencies");
    return currencies;
  }
  async getCurrency({ id }) {
    const currency = await this.get(`/currencies/${id}`);
    return currency;
  }
  async getTime() {
    const time = await this.get("/time");
    return time;
  }
  static parseJSON(string) {
    let output;
    try {
      output = JSON.parse(string);
      return output;
    } catch {
      return output;
    }
  }
}
exports.PublicClient = PublicClient;
