"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedClient = void 0;
const public_1 = require("./public");
const signer_1 = require("./signer");
const querystring_1 = require("querystring");
class AuthenticatedClient extends public_1.PublicClient {
  constructor({ key, secret, passphrase, ...rest }) {
    super(rest);
    this.#key = key;
    this.#secret = secret;
    this.#passphrase = passphrase;
  }
  #key;
  #secret;
  #passphrase;
  async fetch(path, { method, body }) {
    const timestamp = Date.now() / 1000;
    const headers = signer_1.Signer({
      timestamp,
      method,
      key: this.#key,
      secret: this.#secret,
      passphrase: this.#passphrase,
      body,
      url: new URL(path, this.apiUri),
    });
    const data = await super.fetch(path, {
      method,
      headers: { ...headers },
      body,
    });
    return data;
  }
  /**
   * Get a list of trading accounts from the profile of the API key.
   */
  async getAccounts() {
    const accounts = await this.get("/accounts");
    return accounts;
  }
  async getAccount({ account_id }) {
    const account = await this.get(`/accounts/${account_id}`);
    return account;
  }
  /**
   * List account activity of the API key’s profile.
   */
  async getAccountHistory({ account_id, ...qs }) {
    const url = new URL(`/accounts/${account_id}/ledger`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const history = await this.get(url.toString());
    return history;
  }
  /**
   * List holds of an account that belong to the same profile as the API key.
   */
  async getHolds({ account_id, ...qs }) {
    const url = new URL(`/accounts/${account_id}/holds`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const holds = await this.get(url.toString());
    return holds;
  }
  async placeOrder({ product_id = this.product_id, ...rest }) {
    const body = JSON.stringify({ product_id, ...rest });
    const order = await this.post("/orders", { body });
    return order;
  }
  async cancelOrder(params) {
    if ("client_oid" in params) {
      const path = `/orders/client:${params.client_oid}`;
      const id = await this.delete(path);
      return id;
    }
    const id = await this.delete(`/orders/${params.id}`);
    return id;
  }
  async cancelAll(qs = {}) {
    const url = new URL(`/orders`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const orders = await this.delete(url.toString());
    return orders;
  }
  async getOrders(qs = {}) {
    const url = new URL(`/orders`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const orders = await this.get(url.toString());
    return orders;
  }
  async getOrder(params) {
    if ("client_oid" in params) {
      const path = `/orders/client:${params.client_oid}`;
      const order = await this.get(path);
      return order;
    }
    const order = await this.get(`/orders/${params.id}`);
    return order;
  }
  async getFills(qs = {}) {
    if (!qs.order_id && !qs.product_id) {
      qs.product_id = this.product_id;
    }
    const url = new URL("/fills", this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const fills = await this.get(url.toString());
    return fills;
  }
  async deposit(params) {
    const body = JSON.stringify(params);
    const path = "/deposits/payment-method";
    const info = await this.post(path, { body });
    return info;
  }
  async depositCoinbase(params) {
    const body = JSON.stringify(params);
    const path = "/deposits/coinbase-account";
    const info = await this.post(path, { body });
    return info;
  }
  async withdraw(params) {
    const body = JSON.stringify(params);
    const path = "/withdrawals/payment-method";
    const info = await this.post(path, { body });
    return info;
  }
  async withdrawCoinbase(params) {
    const body = JSON.stringify(params);
    const path = "/withdrawals/coinbase-account";
    const info = await this.post(path, { body });
    return info;
  }
  async withdrawCrypto(params) {
    const body = JSON.stringify(params);
    const path = "/withdrawals/crypto";
    const info = await this.post(path, { body });
    return info;
  }
  /** Get the network fee estimate when sending to the given address. */
  async feeEstimate(qs) {
    const url = new URL(`/withdrawals/fee-estimate`, this.apiUri);
    url.search = querystring_1.stringify({ ...qs });
    const methods = await this.get(url.toString());
    return methods;
  }
  async convert(params) {
    const body = JSON.stringify(params);
    const result = await this.post("/conversions", { body });
    return result;
  }
  async getPaymentMethods() {
    const methods = await this.get("/payment-methods");
    return methods;
  }
  async getCoinbaseAccounts() {
    const path = "/coinbase-accounts";
    const accounts = await this.get(path);
    return accounts;
  }
  async getFees() {
    const fees = await this.get("/fees");
    return fees;
  }
  async createReport(params) {
    if (params.type === "fills" && !params.product_id) {
      params.product_id = this.product_id;
    } else if (params.type === "account" && !params.account_id) {
      throw new Error("`account_id` is missing");
    }
    const body = JSON.stringify(params);
    const result = await this.post("/reports", { body });
    return result;
  }
  async getReport({ id }) {
    const status = await this.get(`/reports/${id}`);
    return status;
  }
  /**
   * List your profiles.
   */
  async getProfiles() {
    const profiles = await this.get("/profiles");
    return profiles;
  }
  /**
   * Get a single profile by profile id.
   */
  async getProfile({ id }) {
    const profile = await this.get(`/profiles/${id}`);
    return profile;
  }
  /**
   * Transfer funds from API key’s profile to another user owned profile.
   */
  async transfer(params) {
    const body = JSON.stringify(params);
    const result = await this.post("/profiles/transfer", { body });
    return result;
  }
  /**
   * Get your 30-day trailing volume for all products of the API key’s profile.
   */
  async getTrailingVolume() {
    const path = "/users/self/trailing-volume";
    const volumes = await this.get(path);
    return volumes;
  }
}
exports.AuthenticatedClient = AuthenticatedClient;
